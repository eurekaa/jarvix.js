(function(){jx.library.define("test",{version:"0.0.1"},["jarvix://test/string","jarvix://test/module","jarvix://test/library"])}).call(this),define("bin/test/index",function(){}),function(){jx.test.define("test/string",function(){return this.describe(".contains()",function(){return this.it("checks if a string is contained",function(){return this.expect(jx.string.contains("hello world","hello")).to.be["true"],this.expect(jx.string.contains("bye bye world","hello")).to.be["false"]})}),this.describe(".repeat()",function(){return this.it("repeats string n times",function(){return this.expect(jx.string.repeat("x")).to.be.equal("x"),this.expect(jx.string.repeat("x",0)).to.be.equal("x"),this.expect(jx.string.repeat("x",1)).to.be.equal("x"),this.expect(jx.string.repeat("x",5)).to.be.equal("xxxxx")})})})}.call(this),define("bin/test/string",function(){}),function(){jx.test.define("test/module",function(){return this.describe(".resolve_paths()",function(){return this.it("resolves paths correctly",function(e){var t=this;return jx.module.resolve_paths(["jarvix://libs/async"],function(n,r){return t.expect(n).to.be["null"],t.expect(r).to.be.an("array"),t.expect(r[0]).to.equal("bin/libs/async"),e()})}),this.it("resolves paths asimmetrically on client and server",function(e){var t=this;return jx.module.resolve_paths({client:["jarvix://libs/async"],server:["node://async"]},function(n,r){return t.expect(n).to.be["null"],t.expect(r).to.be.an("array"),jx.utility.is_nodejs()?t.expect(r[0]).to.eql("async"):jx.utility.is_browser()&&t.expect(r[0]).to.eql("bin/libs/async"),e()})}),this.it("adds paramters for caching purposes",function(e){return jx.library.config(jx,{module:{cache:!1}},function(t,n){if(n.utility.is_nodejs())return n.test.expect(n.module.options.cache).to.be["true"],e();if(n.utility.is_browser())return n.module.resolve_paths(["jarvix://libs/async"],function(t,r){var i,s;return n.test.expect(t).to.be["null"],s=n.module.options.requirejs,i=s.toUrl(r[0]),n.test.expect(s.s.contexts._.config.urlArgs).to.contain("v="),n.test.expect(n.string.contains(i,"?v=")).to.be["true"],e()})})})})})}.call(this),define("bin/test/module",function(){});